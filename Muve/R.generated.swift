// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift

import Foundation
import Rswift
import UIKit

/// This `R` struct is code generated, and contains references to static resources.
struct R: Rswift.Validatable {
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    private init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 2 files.
  struct file {
    /// Resource file `autoupdate-build-version.sh`.
    static let autoupdateBuildVersionSh = FileResource(bundle: _R.hostingBundle, name: "autoupdate-build-version", pathExtension: "sh")
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = FileResource(bundle: _R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    
    /// `bundle.URLForResource("autoupdate-build-version", withExtension: "sh")`
    static func autoupdateBuildVersionSh(_: Void) -> NSURL? {
      let fileResource = R.file.autoupdateBuildVersionSh
      return fileResource.bundle.URLForResource(fileResource)
    }
    
    /// `bundle.URLForResource("GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void) -> NSURL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.URLForResource(fileResource)
    }
    
    private init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    private init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 8 images.
  struct image {
    /// Image `Avatar`.
    static let avatar = ImageResource(bundle: _R.hostingBundle, name: "Avatar")
    /// Image `HamburgerIcon`.
    static let hamburgerIcon = ImageResource(bundle: _R.hostingBundle, name: "HamburgerIcon")
    /// Image `LaunchLogo`.
    static let launchLogo = ImageResource(bundle: _R.hostingBundle, name: "LaunchLogo")
    /// Image `MainLogo`.
    static let mainLogo = ImageResource(bundle: _R.hostingBundle, name: "MainLogo")
    /// Image `MessageIcon`.
    static let messageIcon = ImageResource(bundle: _R.hostingBundle, name: "MessageIcon")
    /// Image `PinIcon`.
    static let pinIcon = ImageResource(bundle: _R.hostingBundle, name: "PinIcon")
    /// Image `TabBarHistory`.
    static let tabBarHistory = ImageResource(bundle: _R.hostingBundle, name: "TabBarHistory")
    /// Image `TabBarMap`.
    static let tabBarMap = ImageResource(bundle: _R.hostingBundle, name: "TabBarMap")
    
    /// `UIImage(named: "Avatar", bundle: ..., traitCollection: ...)`
    static func avatar(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.avatar, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "HamburgerIcon", bundle: ..., traitCollection: ...)`
    static func hamburgerIcon(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.hamburgerIcon, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "LaunchLogo", bundle: ..., traitCollection: ...)`
    static func launchLogo(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.launchLogo, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "MainLogo", bundle: ..., traitCollection: ...)`
    static func mainLogo(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.mainLogo, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "MessageIcon", bundle: ..., traitCollection: ...)`
    static func messageIcon(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.messageIcon, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "PinIcon", bundle: ..., traitCollection: ...)`
    static func pinIcon(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.pinIcon, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "TabBarHistory", bundle: ..., traitCollection: ...)`
    static func tabBarHistory(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.tabBarHistory, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "TabBarMap", bundle: ..., traitCollection: ...)`
    static func tabBarMap(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.tabBarMap, compatibleWithTraitCollection: traitCollection)
    }
    
    private init() {}
  }
  
  private struct intern: Rswift.Validatable {
    static func validate() throws {
      try _R.validate()
    }
    
    private init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 3 nibs.
  struct nib {
    /// Nib `FeedCollectionViewCell`.
    static let feedCollectionViewCell = _R.nib._FeedCollectionViewCell()
    /// Nib `MenuCollectionViewCell`.
    static let menuCollectionViewCell = _R.nib._MenuCollectionViewCell()
    /// Nib `MenuHeaderCollectionViewCell`.
    static let menuHeaderCollectionViewCell = _R.nib._MenuHeaderCollectionViewCell()
    
    /// `UINib(name: "FeedCollectionViewCell", bundle: ...)`
    static func feedCollectionViewCell(_: Void) -> UINib {
      return UINib(resource: R.nib.feedCollectionViewCell)
    }
    
    /// `UINib(name: "MenuCollectionViewCell", bundle: ...)`
    static func menuCollectionViewCell(_: Void) -> UINib {
      return UINib(resource: R.nib.menuCollectionViewCell)
    }
    
    /// `UINib(name: "MenuHeaderCollectionViewCell", bundle: ...)`
    static func menuHeaderCollectionViewCell(_: Void) -> UINib {
      return UINib(resource: R.nib.menuHeaderCollectionViewCell)
    }
    
    private init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 3 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `FeedCollectionViewCellID`.
    static let feedCollectionViewCellID: ReuseIdentifier<FeedCollectionViewCell> = ReuseIdentifier(identifier: "FeedCollectionViewCellID")
    /// Reuse identifier `MenuCell`.
    static let menuCell: ReuseIdentifier<MenuCollectionViewCell> = ReuseIdentifier(identifier: "MenuCell")
    /// Reuse identifier `MenuHeaderCell`.
    static let menuHeaderCell: ReuseIdentifier<MenuHeaderCollectionViewCell> = ReuseIdentifier(identifier: "MenuHeaderCell")
    
    private init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    private init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 7 storyboards.
  struct storyboard {
    /// Storyboard `Feed`.
    static let feed = _R.storyboard.feed()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Login`.
    static let login = _R.storyboard.login()
    /// Storyboard `Map`.
    static let map = _R.storyboard.map()
    /// Storyboard `Menu`.
    static let menu = _R.storyboard.menu()
    /// Storyboard `Message`.
    static let message = _R.storyboard.message()
    /// Storyboard `Profile`.
    static let profile = _R.storyboard.profile()
    
    /// `UIStoryboard(name: "Feed", bundle: ...)`
    static func feed(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.feed)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Login", bundle: ...)`
    static func login(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.login)
    }
    
    /// `UIStoryboard(name: "Map", bundle: ...)`
    static func map(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.map)
    }
    
    /// `UIStoryboard(name: "Menu", bundle: ...)`
    static func menu(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.menu)
    }
    
    /// `UIStoryboard(name: "Message", bundle: ...)`
    static func message(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.message)
    }
    
    /// `UIStoryboard(name: "Profile", bundle: ...)`
    static func profile(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.profile)
    }
    
    private init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    private init() {}
  }
  
  private init() {}
}

struct _R: Rswift.Validatable {
  static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(NSLocale.init) ?? NSLocale.currentLocale()
  static let hostingBundle = NSBundle(identifier: "com.muveapp.muve") ?? NSBundle.mainBundle()
  
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _FeedCollectionViewCell: NibResourceType, ReuseIdentifierType {
      typealias ReusableType = FeedCollectionViewCell
      
      let bundle = _R.hostingBundle
      let identifier = "FeedCollectionViewCellID"
      let name = "FeedCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> FeedCollectionViewCell? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? FeedCollectionViewCell
      }
      
      private init() {}
    }
    
    struct _MenuCollectionViewCell: NibResourceType, ReuseIdentifierType {
      typealias ReusableType = MenuCollectionViewCell
      
      let bundle = _R.hostingBundle
      let identifier = "MenuCell"
      let name = "MenuCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MenuCollectionViewCell? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? MenuCollectionViewCell
      }
      
      private init() {}
    }
    
    struct _MenuHeaderCollectionViewCell: NibResourceType, ReuseIdentifierType {
      typealias ReusableType = MenuHeaderCollectionViewCell
      
      let bundle = _R.hostingBundle
      let identifier = "MenuHeaderCell"
      let name = "MenuHeaderCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MenuHeaderCollectionViewCell? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? MenuHeaderCollectionViewCell
      }
      
      private init() {}
    }
    
    private init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try feed.validate()
      try message.validate()
      try profile.validate()
      try login.validate()
      try launchScreen.validate()
      try menu.validate()
      try map.validate()
    }
    
    struct feed: StoryboardResourceType, Rswift.Validatable {
      let bundle = _R.hostingBundle
      let feedViewControllerID = StoryboardViewControllerResource<FeedViewController>(identifier: "FeedViewControllerID")
      let name = "Feed"
      let orderViewControllerID = StoryboardViewControllerResource<OrderViewController>(identifier: "OrderViewControllerID")
      
      func feedViewControllerID(_: Void) -> FeedViewController? {
        return UIStoryboard(resource: self).instantiateViewController(feedViewControllerID)
      }
      
      func orderViewControllerID(_: Void) -> OrderViewController? {
        return UIStoryboard(resource: self).instantiateViewController(orderViewControllerID)
      }
      
      static func validate() throws {
        if _R.storyboard.feed().feedViewControllerID() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'feedViewControllerID' could not be loaded from storyboard 'Feed' as 'FeedViewController'.") }
        if _R.storyboard.feed().orderViewControllerID() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'orderViewControllerID' could not be loaded from storyboard 'Feed' as 'OrderViewController'.") }
      }
      
      private init() {}
    }
    
    struct launchScreen: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIViewController
      
      let bundle = _R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIImage(named: "LaunchLogo") == nil { throw ValidationError(description: "[R.swift] Image named 'LaunchLogo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
      
      private init() {}
    }
    
    struct login: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = LoginViewController
      
      let bundle = _R.hostingBundle
      let loaderScreenViewControllerID = StoryboardViewControllerResource<LoaderScreenViewController>(identifier: "LoaderScreenViewControllerID")
      let loginViewControllerID = StoryboardViewControllerResource<LoginViewController>(identifier: "LoginViewControllerID")
      let name = "Login"
      let signUpViewControllerID = StoryboardViewControllerResource<SignUpViewController>(identifier: "SignUpViewControllerID")
      
      func loaderScreenViewControllerID(_: Void) -> LoaderScreenViewController? {
        return UIStoryboard(resource: self).instantiateViewController(loaderScreenViewControllerID)
      }
      
      func loginViewControllerID(_: Void) -> LoginViewController? {
        return UIStoryboard(resource: self).instantiateViewController(loginViewControllerID)
      }
      
      func signUpViewControllerID(_: Void) -> SignUpViewController? {
        return UIStoryboard(resource: self).instantiateViewController(signUpViewControllerID)
      }
      
      static func validate() throws {
        if UIImage(named: "MainLogo") == nil { throw ValidationError(description: "[R.swift] Image named 'MainLogo' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIImage(named: "LaunchLogo") == nil { throw ValidationError(description: "[R.swift] Image named 'LaunchLogo' is used in storyboard 'Login', but couldn't be loaded.") }
        if _R.storyboard.login().loginViewControllerID() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'loginViewControllerID' could not be loaded from storyboard 'Login' as 'LoginViewController'.") }
        if _R.storyboard.login().signUpViewControllerID() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'signUpViewControllerID' could not be loaded from storyboard 'Login' as 'SignUpViewController'.") }
        if _R.storyboard.login().loaderScreenViewControllerID() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'loaderScreenViewControllerID' could not be loaded from storyboard 'Login' as 'LoaderScreenViewController'.") }
      }
      
      private init() {}
    }
    
    struct map: StoryboardResourceType, Rswift.Validatable {
      let bundle = _R.hostingBundle
      let mapViewControllerID = StoryboardViewControllerResource<MapViewController>(identifier: "MapViewControllerID")
      let name = "Map"
      
      func mapViewControllerID(_: Void) -> MapViewController? {
        return UIStoryboard(resource: self).instantiateViewController(mapViewControllerID)
      }
      
      static func validate() throws {
        if _R.storyboard.map().mapViewControllerID() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'mapViewControllerID' could not be loaded from storyboard 'Map' as 'MapViewController'.") }
      }
      
      private init() {}
    }
    
    struct menu: StoryboardResourceType, Rswift.Validatable {
      let bundle = _R.hostingBundle
      let menuViewControllerID = StoryboardViewControllerResource<MenuViewController>(identifier: "MenuViewControllerID")
      let name = "Menu"
      
      func menuViewControllerID(_: Void) -> MenuViewController? {
        return UIStoryboard(resource: self).instantiateViewController(menuViewControllerID)
      }
      
      static func validate() throws {
        if _R.storyboard.menu().menuViewControllerID() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'menuViewControllerID' could not be loaded from storyboard 'Menu' as 'MenuViewController'.") }
      }
      
      private init() {}
    }
    
    struct message: StoryboardResourceType, Rswift.Validatable {
      let bundle = _R.hostingBundle
      let messageViewControllerID = StoryboardViewControllerResource<MessageViewController>(identifier: "MessageViewControllerID")
      let name = "Message"
      
      func messageViewControllerID(_: Void) -> MessageViewController? {
        return UIStoryboard(resource: self).instantiateViewController(messageViewControllerID)
      }
      
      static func validate() throws {
        if _R.storyboard.message().messageViewControllerID() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'messageViewControllerID' could not be loaded from storyboard 'Message' as 'MessageViewController'.") }
      }
      
      private init() {}
    }
    
    struct profile: StoryboardResourceType, Rswift.Validatable {
      let bundle = _R.hostingBundle
      let name = "Profile"
      let profileViewControllerID = StoryboardViewControllerResource<ProfileViewController>(identifier: "ProfileViewControllerID")
      
      func profileViewControllerID(_: Void) -> ProfileViewController? {
        return UIStoryboard(resource: self).instantiateViewController(profileViewControllerID)
      }
      
      static func validate() throws {
        if _R.storyboard.profile().profileViewControllerID() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'profileViewControllerID' could not be loaded from storyboard 'Profile' as 'ProfileViewController'.") }
      }
      
      private init() {}
    }
    
    private init() {}
  }
  
  private init() {}
}